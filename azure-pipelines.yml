# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '5.x'

stages:
  - stage: build
    jobs:
    - job: build
      pool:
        vmImage: 'ubuntu-20.04'

      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET SDK $(dotnetSdkVersion)'
        inputs:
          version: '$(dotnetSdkVersion)'

      - task: DotNetCoreCLI@2
        displayName: 'Restore project dependencies'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Build the project - $(dotnetSdkVersion)'
        inputs:
          command: 'build'
          arguments: '--no-restore --configuration $(dotnetSdkVersion)'
          projects: '**/*.csproj'
      
      - task: DotNetCoreCLI@2
        displayName: 'Install .NET tools from local manifest'
        inputs:
          command: custom
          custom: tool
          arguments: 'restore'
      
      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests - $(buildConfiguration)'
        inputs:
          command: 'test'
          arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
          publishTestResults: true
          projects: '**/*Tests.csproj'
      
      - task: DotNetCoreCLI@2
        displayName: 'Create code coverage report'
        inputs:
          command: custom
          custom: tool
          arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'
      
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: 'cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
      
      - task: DotNetCoreCLI@2
        displayName: 'Publish the project - $(buildConfiguration)'
        inputs:
          command: 'publish'
          projects: '**/*.csproj'
          publishWebProjects: false
          arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
          zipAfterPublish: true
      
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        condition: succeeded()
    

